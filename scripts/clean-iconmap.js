/**
 * Script to clean corrupted iconMap.ts file
 * Removes Mac OS X metadata entries and invalid SVG content
 */
const fs = require('fs');
const path = require('path');

// Read the current iconMap.ts
const iconMapPath = path.join(__dirname, '..', 'iconMap.ts');
const content = fs.readFileSync(iconMapPath, 'utf8');

// Extract the iconMap object using regex
const mapMatch = content.match(/export const iconMap: Record<string, string> = \{([\s\S]*)\};/);
if (!mapMatch) {
  console.error('Could not find iconMap in file');
  process.exit(1);
}

const mapContent = mapMatch[1];

// Parse entries using a more robust approach
const entries = [];
let currentEntry = '';
let inString = false;
let stringChar = '';
let braceLevel = 0;

for (let i = 0; i < mapContent.length; i++) {
  const char = mapContent[i];
  const prevChar = mapContent[i - 1];
  
  if (!inString && (char === '"' || char === '`')) {
    inString = true;
    stringChar = char;
    currentEntry += char;
  } else if (inString && char === stringChar && prevChar !== '\\') {
    inString = false;
    stringChar = '';
    currentEntry += char;
  } else if (!inString && char === '{') {
    braceLevel++;
    currentEntry += char;
  } else if (!inString && char === '}') {
    braceLevel--;
    currentEntry += char;
  } else if (!inString && char === ',' && braceLevel === 0) {
    // End of entry
    entries.push(currentEntry.trim());
    currentEntry = '';
  } else {
    currentEntry += char;
  }
}

// Add the last entry if it exists
if (currentEntry.trim()) {
  entries.push(currentEntry.trim());
}

console.log(`Found ${entries.length} entries to process`);

// Filter and clean entries
const cleanedEntries = [];
let validCount = 0;
let invalidCount = 0;

entries.forEach(entry => {
  if (!entry.trim()) return;
  
  // Extract key and value
  const match = entry.match(/^\s*"([^"]+)"\s*:\s*`([^`]*)`\s*$/);
  if (!match) {
    invalidCount++;
    return;
  }
  
  const [, key, value] = match;
  
  // Check if it's Mac OS X metadata
  if (value.includes('Mac OS X') || 
      value.includes('__MACOSX') || 
      value.includes('.DS_Store') ||
      value.includes('com.apple.quarantine') ||
      value.includes('ATTR')) {
    invalidCount++;
    return;
  }
  
  // Check if it's a valid SVG
  if (!value.includes('<svg') || !value.includes('</svg>')) {
    invalidCount++;
    return;
  }
  
  // Check minimum length
  if (value.length < 20) {
    invalidCount++;
    return;
  }
  
  validCount++;
  cleanedEntries.push(`  "${key}": \`${value}\``);
});

console.log(`Valid entries: ${validCount}`);
console.log(`Invalid/corrupted entries removed: ${invalidCount}`);

// Generate new file content
const newContent = `// Auto-generated by SVG → TS Map (Cleaned)
export const iconMap: Record<string, string> = {
${cleanedEntries.join(',\n')}
};
`;

// Write the cleaned file
fs.writeFileSync(iconMapPath, newContent, 'utf8');
console.log('✅ iconMap.ts has been cleaned and updated');